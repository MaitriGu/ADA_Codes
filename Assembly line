#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>

using namespace std;

int randomInt(int a, int b) {
    return rand() % (b - a + 1) + a;
}

vector<int> generateTimeDurations(int stages) {
    vector<int> durations;
    for (int i = 0; i < stages; ++i) {
        durations.push_back(randomInt(1, 10));
    }
    return durations;
}

vector<int> generateTransferTimes(int stages) {
    vector<int> transferTimes;
    for (int i = 0; i < stages - 1; ++i) {
        transferTimes.push_back(randomInt(1, 5));
    }
    return transferTimes;
}

void generateAssemblyLineData(int stages, vector<int> &timeDurations1, vector<int> &timeDurations2,
                              vector<int> &transferTimes1, vector<int> &transferTimes2) {
    srand(time(0));
    timeDurations1 = generateTimeDurations(stages);
    timeDurations2 = generateTimeDurations(stages);
    transferTimes1 = generateTransferTimes(stages);
    transferTimes2 = generateTransferTimes(stages);
}

void printPath(vector<vector<int>> &l, int lastTrack, int i) {
    if (i < 0)
        return;
    cout << lastTrack << endl;
    int lst = l[lastTrack][i];
    printPath(l, lst, i - 1);
}

int assemblyLine(vector<vector<int>> A, vector<vector<int>> t, int e1, int e2, int x1, int x2, int n) {
    vector<vector<int>> f(2, vector<int>(n, 0));
    vector<vector<int>> l(2, vector<int>(n, 0));
    f[0][0] = e1 + A[0][0];
    f[1][0] = e2 + A[1][0];

    for (int j = 1; j < n; j++) {
        if (f[0][j - 1] + A[0][j] < f[1][j - 1] + t[1][j - 1] + A[0][j]) {
            f[0][j] = f[0][j - 1] + A[0][j];
            l[0][j] = 0;
        } else {
            f[1][j] = f[1][j - 1] + t[1][j - 1] + A[0][j];
            l[0][j] = 1;
        }

        if (f[1][j - 1] + A[1][j] < f[0][j - 1] + t[0][j - 1] + A[1][j]) {
            f[0][j] = f[1][j - 1] + A[1][j];
            l[1][j] = 1;
        } else {
            f[1][j] = f[0][j - 1] + t[0][j - 1] + A[1][j];
            l[1][j] = 0;
        }
    }

    int minT = 0;
    int lastTrack;
    if (f[0][n - 1] + x1 < f[1][n - 1] + x2) {
        minT = f[0][n - 1] + x1;
        lastTrack = 0;
    } else {
        minT = f[1][n - 1] + x2;
        lastTrack = 1;
    }
    cout << "Printing the path \n";
    printPath(l, lastTrack, n - 1);
    return minT;
}

int main() {
    int stages = 10; // Number of stages
    int entry1 = 5, entry2 = 5, exit1 = 5, exit2 = 5; // Entry and exit times
    vector<int> timeDurations1, timeDurations2;
    vector<int> transferTimes1, transferTimes2;

    generateAssemblyLineData(stages, timeDurations1, timeDurations2, transferTimes1, transferTimes2);

    vector<vector<int>> A = {timeDurations1, timeDurations2};
    vector<vector<int>> t = {transferTimes1, transferTimes2};
    int minTime = assemblyLine(A, t, entry1, entry2, exit1, exit2, stages);
    cout << "Minimum Time to complete both assembly lines: " << minTime << endl;

    return 0;
}
