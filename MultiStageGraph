#include <iostream>
#include <climits>
#define INF INT_MAX
using namespace std;

void ForwardCostAlgo(int Cost[][6], int fcost[], int path[], int d[]) {
    fcost[5] = 0;
    int min;
    for (int j = 4; j >= 0; j--) {
         min = INF;
        for (int i = j + 1; i <= 5; i++) {
            if ((Cost[j][i] != 0) && (Cost[j][i]!=INF) && (Cost[j][i] + fcost[i] < min)) {
                min = Cost[j][i] + fcost[i];
                fcost[j]=min;
                d[j] = i;
            }
        }
    }
    path[0] = 0;
    path[2] = 5;
    for(int l=1;l<=1;l++){
    	path[l]=d[path[l-1]];	}
}

int main() {
    const int vertices = 6;
    const int stages = 3;

   int Cost[6][6] = {
    {0,5,6,7,8,INF},
    {INF,0,INF,INF,INF,6},
    {INF, INF, 0, INF, INF,7 },
    {INF, INF, INF, 0, INF,8 },
    {INF, INF, INF, INF, 0, 9},
    {INF, INF, INF, INF, INF, 0},
};

    int fcost[6];
    int path[stages];
    int d[6];
    ForwardCostAlgo(Cost, fcost, path, d);

    cout << "Forward Cost: ";
    for (int i = 0; i < vertices; i++) {
        cout << fcost[i] << " ";
    }
    cout << endl;

    cout << "Path: ";
    for (int i = 0; i < stages; i++) {
        cout << path[i] << " ";
    }
    cout << endl;
    cout<<"d:";
    	for(int i=0;i<vertices;i++){
    		cout<<d[i]<<" ";
		}

    return 0;
}
